// https://ohmlang.github.io/editor/
MiniCaml {
  MAIN = Exp eof

  Exp =
    | Prefix
    // fun x -> e
    | fun var arrow Exp                -- fun
    // let x = e1 in e2
    | let var equal Exp in Exp         -- let
    // let rec f x = e1 in e2
    | let rec var var equal Exp in Exp -- let_rec
    | if Exp then Exp else Exp         -- if
    | match Exp with Cases             -- match

  Prefix =
    | prefixOp? Infix0

  Infix0 =
    | Infix1 (infix0op Infix1)*

  Infix1 =
    | Infix2 (infix1opR Infix1)* // right assoc

  Infix2 =
    | Infix3 (infix2op  Infix3)*

  Infix3 =
    | Infix4 (infix3op Infix4)*

  Infix4 =
    | PriExp PriExp+ -- apply
    | PriExp

  PriExp =
    | Literals
    | lparen Exp rparen -- paren

  Cases =
    | Pattern arrow Exp         -- single
    | (vbar Pattern arrow Exp)+ -- multiple

  Pattern =
    | Pattern_inner (colcol Pattern)*

  Pattern_inner = Literals

  Literals =
    | var
    | Tuple
    | int
    | bool
    | string
    | Unit
    | EmptyList
    | List

  List = lbra Exp (semicol Exp)* semicol? rbra
  Tuple = Exp (comma Exp)+ comma?

  /// tokens

  // literal
  var = ~keyword id
  int = minus? digit+
  bool = true | false
  Unit = lparen rparen
  EmptyList = lbra rbra
  string = "\"" (regularchar | "\'")* "\""

  id = (letter | "_") ( alnum | "." | "_" | "'")*

  // op

  prefixOp  = not
  infix0op  = equal | less | greater
  infix1opR = colcol
  infix2op  = plus | minus
  infix3op  = asterisk | slash

  plus     = "+"
  minus    = "-"
  asterisk = "*"
  slash    = "/"
  equal    = "="
  less     = "<"
  greater  = ">"
  semicol  = ";"
  colcol   = "::"
  comma    = ","

  // group
  lparen = "("
  rparen = ")"
  lbra   = "["
  rbra   = "]"

  // termination
  arrow = "->"
  vbar  = "|"

  // keyword
  keyword =
    | not
    | true
    | false
    | fun
    | let
    | rec
    | in
    | if
    | then
    | else
    | match
    | with

  not   = "not"   ~id
  true  = "true"  ~id
  false = "false" ~id
  fun   = "fun"   ~id
  let   = "let"   ~id
  rec   = "rec"   ~id
  in    = "in"    ~id
  if    = "if"    ~id
  then  = "then"  ~id
  else  = "else"  ~id
  match = "match" ~id
  with  = "with"  ~id

  escape = "\\" ("\\" | "\"" | "'" | "n" | "t" | "r")

  regularchar =
    | escape
    | ~("\\" | "\"" | "'" | "\n") any

  // control
  eof = end
}
